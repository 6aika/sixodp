---
- name: Install PyMySQL
  pip:
    name: PyMySQL

- name: Download WP-CLI
  get_url:
    url: https://github.com/wp-cli/wp-cli/releases/download/v{{ wp_cli_version }}/wp-cli-{{ wp_cli_version }}.phar
    dest: /usr/local/bin/wp
    mode: 0755
    checksum: "{{ wp_cli_checksum }}"

- name: Create wp-cli cache
  file:
    state: directory
    path: /var/www/.wp-cli/cache
    owner: www-data
    group: www-data

- block:
  - name: Check WP-CLI version
    command: wp cli version --yes --allow-root
    register: results

  - name: Update WP CLI
    command: wp cli update --yes --allow-root
    when: results.stdout | regex_search('(?<=WP-CLI.)(.*)') < wp_cli_version

  become: yes

- block:
  - name: Create database
    mysql_db:
      name: "{{ mysql.databases.wordpress.name }}"
      encoding: utf8
      login_host: "{{ mysql.server.host }}"
      login_user: "{{ mysql.server.admin_user }}"
      login_password: "{{ mysql.server.admin_password }}"
      login_unix_socket: /var/run/mysqld/mysqld.sock

  - name: Create database user
    mysql_user:
      name: "{{ mysql.users.wordpress.username }}"
      host: "%"
      password: "{{ mysql.users.wordpress.password  }}"
      priv: "wordpress.*:ALL"
      login_host: "{{ mysql.server.host }}"
      login_user: "{{ mysql.server.admin_user }}"
      login_password: "{{ mysql.server.admin_password }}"
      login_unix_socket: /var/run/mysqld/mysqld.sock
  when: mysql.server.installed_locally

- block:
  - name: Create database
    mysql_db:
      name: "{{ mysql.databases.wordpress.name }}"
      encoding: utf8
      login_host: "{{ mysql.server.host }}"
      login_user: "{{ mysql.server.admin_user }}"
      login_password: "{{ mysql.server.admin_password }}"

  - name: Create database user
    mysql_user:
      name: "{{ mysql.users.wordpress.username }}"
      host: "%"
      password: "{{ mysql.users.wordpress.password  }}"
      priv: "wordpress.*:ALL"
      login_host: "{{ mysql.server.host }}"
      login_user: "{{ mysql.server.admin_user }}"
      login_password: "{{ mysql.server.admin_password }}"
  when: not mysql.server.installed_locally



- name: Create WordPress directory
  file:
    state: directory
    path: /opt/wordpress
    owner: www-data
    group: www-data

- block:

  - name: Download WordPress
    command:
      wp core download --path=/opt/wordpress --version={{ wordpress_version }}
    args:
      creates: /opt/wordpress/index.php

  - name: Check if EFS is available
    stat:
      path: /mnt/wp-uploads
    register: stat_result

  - name: Create symbolic link to EFS for uploads
    file:
      src: /mnt/wp-uploads
      path: /opt/wordpress/wp-content/uploads
      state: link
    when: stat_result.stat.exists

  - name: Configure WordPress
    command: >
      wp core config
        --path=/opt/wordpress
        --dbhost={{ mysql.server.host }}
        --dbname={{ mysql.databases.wordpress.name }}
        --dbuser={{ mysql.users.wordpress.username }}
        --dbpass={{ mysql.users.wordpress.password }}
    args:
      creates: /opt/wordpress/wp-config.php

  - name: Install WordPress
    command: >
      wp core install
        --path=/opt/wordpress
        --url=https://{{ public_facing_hostname }}/
        --title=6aika
        --admin_user={{ wordpress_users.admin.username }}
        --admin_password={{ wordpress_users.admin.password }}
        --admin_email={{ wordpress_users.admin.email }}
    when: deployment_environment_id != "vagrant"

  - name: Install WordPress and activate debug on vagrant
    command: >
      wp core install
        --path=/opt/wordpress
        --url=https://{{ public_facing_hostname }}/
        --title=6aika
        --admin_user={{ wordpress_users.admin.username }}
        --admin_password={{ wordpress_users.admin.password }}
        --admin_email={{ wordpress_users.admin.email }}
        --debug=true
    when: deployment_environment_id == "vagrant"

  - name: Install and activate plugins
    command: >
      wp plugin install
        --path=/opt/wordpress
        --activate
        {{ wordpress_plugins|join(' ') }}
    when: wordpress_plugins

  - name: Change permalink structure
    command: >
      wp option set
        --path=/opt/wordpress
        permalink_structure /%postname%/

  - name: Update WordPress
    command:
      wp core update --path=/opt/wordpress

  - name: Update WordPress database
    command:
      wp core update-db --path=/opt/wordpress

  - name: Update WordPress plugins
    command:
      wp plugin update --all --path=/opt/wordpress  --exclude=contact-widgets,wp-trello

  - name: Update WordPress themes
    command:
      wp theme update --all --path=/opt/wordpress

  become: yes
  become_user: www-data


- name: Create WP-CLI directory
  file:
    state: directory
    path: /opt/wp-cli
    owner: www-data
    group: www-data

- block:
  - name: Install polylang-cli
    command: wp package install git@github.com:diggy/polylang-cli.git

  - name: Add languages to polylang-cli
    command: wp pll lang create "{{ item.name }}" "{{ item.code }}" "{{ item.locale }}" --flag="{{ item.flag }}" --path=/opt/wordpress
    with_items: "{{ polylang_languages }}"
    ignore_errors: true

  - name: Configure polylang
    command: wp pll option update "{{ item.option }}" "{{ item.value }}" --path=/opt/wordpress
    with_items: "{{ polylang_config }}"
    ignore_errors: true


  become: yes
  become_user: www-data

  environment:
    WP_CLI_CACHE_DIR: /opt/wp-cli/cache
    WP_CLI_CONFIG_PATH: /opt/wp-cli/config.yml
    WP_CLI_PACKAGES_DIR: /opt/wp-cli/packages


- block:
  - name: Configure ReCaptcha sitekey
    command: wp option update recaptcha_publickey {{ recaptcha_sitekey }} --path=/opt/wordpress

  - name: Configure ReCaptcha sitekey
    command: wp option update recaptcha_privatekey {{ secret.recaptcha_secret }} --path=/opt/wordpress

  when: secret.recaptcha_secret is defined
  become_user: www-data

- name: Create symbolic link to sixodp theme
  file:
    src: /vagrant/sixodp
    dest: /opt/wordpress/wp-content/themes/sixodp
    state: link
  when: deployment_environment_id == "vagrant"

- name: Synchronize sixodp theme
  synchronize:
    src: ../sixodp/
    dest: /opt/wordpress/wp-content/themes/sixodp/
    delete: true
  when: deployment_environment_id != "vagrant"

- name: Copy translations
  copy: src=../sixodp/i18n/{{ item.locale }}/LC_MESSAGES/sixodp-{{ item.locale }}.mo dest=/opt/wordpress/wp-content/languages/themes/
  with_items: "{{ polylang_languages }}"

- name: Copy ckan-config to theme
  template: src="ckan-config.php.j2" dest="/opt/wordpress/wp-content/themes/sixodp/ckan-config.php" mode=0644 owner=www-data group=www-data

- name: Copy disqus-config to theme
  template: src="disqus-config.php.j2" dest="/opt/wordpress/wp-content/themes/sixodp/disqus-config.php" mode=0644 owner=www-data group=www-data

- name: Activate sixodp theme
  command: wp theme activate sixodp --path=/opt/wordpress
  become: yes
  become_user: www-data

- name: Create initial content for WordPress
  command: wp eval-file /opt/wordpress/wp-content/themes/sixodp/initialize_theme.php --path=/opt/wordpress 
  become: yes
  become_user: www-data
  
- include: local_plugin.yml
  with_items: "{{ wordpress_local_plugins }}"

#- name: Create symbolic link for wordpress tools includes
#  file:
#    src: /opt/wordpress/
#    dest: /vagrant/src
#   state: link
#   force: yes
# when: deployment_environment_id == "vagrant"

