---

- name: Ensure CKAN common packages
  apt: pkg={{ item }} state=latest
  with_items:
    - libxslt1-dev
    - libgeos-c1
    - supervisor
  tags:
  - packages
  - ckan

- name: Install CKAN
  pip: name="git+https://github.com/ckan/ckan.git@ckan-{{ ckan_version }}#egg=ckan" virtualenv={{ virtualenv }} state=latest
  tags:
  - ckan

- name: Install CKAN requirements
  pip: requirements={{ virtualenv }}/src/ckan/requirements.txt virtualenv={{ virtualenv }} state=latest
  tags:
  - ckan

- name: Install CKAN launch script
  template: src=ckan.j2 dest=/usr/bin/ckan mode=0755 owner=root group=root
  tags:
  - ckan

# - include: patch.yml

- name: Create CKAN files path
  file: path="{{ ckan_files_path }}" state=directory mode=0770 owner="{{ www_user }}" group="{{ www_group }}"
- name: Create CKAN settings path
  file: path="/etc/ckan/default" state=directory mode=0770 owner="{{ www_user }}" group="{{ www_group }}"

- name: Ensure path ownerships
  command: chown -R "{{ www_user }}:{{ www_group }}" "{{ ckan_files_path }}" /etc/ckan/default
- name: Ensure celerybeat pid ownership
  command: chown "{{ www_user }}:{{ www_group }}" /tmp/celerybeat_pid /tmp/celerybeat_schedule
  ignore_errors: True
- name: Ensure upload path mode
  command: chmod -R "0770" "{{ ckan_files_path }}" 


- name: Copy CKAN configuration
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }} owner={{ item.owner }} group={{ item.owner }}
  with_items:
    - { src: ckan.ini.j2, dest: "{{ ckan_ini }}", mode: 0640, owner: root, group: "{{ www_group }}" }
    - { src: apache.wsgi.j2, dest: /etc/ckan/default/apache.wsgi, mode: 0640, owner: root, group: "{{ www_group }}" }
    - { src: who.ini.j2, dest: /etc/ckan/default/who.ini, mode: 0640, owner: root, group: "{{ www_group }}" }


# Spatial / libxml

- name: Create debian cache path
  file: path="{{ cache_path }}/debian" state=directory
  tags:
  - ckan
  - spatial
  - packages

- name: Copy libxml2-2.9 packages
  copy: src="{{ item }}" dest="{{ cache_path }}/debian/{{ item }}" mode=0644 owner=root group=root
  register: copy_libxml2
  with_items:
    - "libxml2_2.9.1+dfsg1-3_amd64.deb"
    - "libxml2-dev_2.9.1+dfsg1-3_amd64.deb"
  tags:
  - packages
  - ckan
  - spatial

- name: Install libxml2-2.9 packages
  command: dpkg -i "{{ cache_path }}/debian/{{ item }}"
  when: copy_libxml2|changed
  with_items:
    - "libxml2_2.9.1+dfsg1-3_amd64.deb"
    - "libxml2-dev_2.9.1+dfsg1-3_amd64.deb"
  tags:
  - packages
  - ckan
  - spatial

# Base requirements


- name: Copy requirements file
  template: src=requirements.txt.j2 dest="{{ cache_path }}/requirements.txt" mode=0644 owner=root group=root
  tags:
  - ckan
  - spatial

- name: Install requirements
  pip: requirements="{{ cache_path }}/requirements.txt" virtualenv="{{ virtualenv }}" extra_args='--exists-action=w --timeout=30'
  tags:
  - ckan
  - spatial

# TODO why this is not in the requirements file above?
- name: Install python package to support SNI in requests
  pip: name=ndg-httpsclient virtualenv="{{ virtualenv }}"
  tags:
  - ckan
  - qa


# Extension requirements

#- name: Install modules
#  pip: name="{{ cache_path }}/{{ item }}" virtualenv="{{ virtualenv }}" state=latest
#  when: modules_copy|changed
#  register: modules_install
#  with_flattened:
#    - ckan_extensions
#  tags:
#  - ckan
#  - modules

# todo: bad tagging
#- name: Install extension requirements
#  pip: requirements="{{ cache_path }}/{{ item.package }}/pip-requirements.txt" virtualenv="{{ virtualenv }}" state={{ item.state }} extra_args='--exists-action=w --timeout=30'
#  with_items:
#    - { package: ckanext-spatial, state: present }
#    - { package: ckanext-archiver, state: latest }
#    - { package: ckanext-qa, state: latest }
#  tags:
#  - ckan
#  - spatial
#  - qa

- name: Ensure SqlAlchemy version
  pip: name="sqlalchemy" virtualenv="{{ virtualenv }}" version="0.9.6" extra_args='--exists-action=w --upgrade --force-reinstall --timeout=30'
  tags:
  - ckan
  - spatial

# Background services can block database update
- name: Stop supervisor services
  command: supervisorctl stop all
  tags:
  - ckan

- name: Initialize CKAN database
  shell: ckan db init
  ignore_errors: True
  tags:
  - ckan

- name: Upgrade CKAN database
  shell: ckan db upgrade
  ignore_errors: True
  tags:
  - ckan

- name: Upgrade CKAN filestore
  shell: ./bin/paster --plugin=ckan db migrate-filestore "--config={{ ckan_ini }}" chdir="{{ virtualenv }}"
  ignore_errors: True
  tags:
  - ckan

# todo: bad tagging
#- name: Initialize extension databases
#  shell: ./bin/paster --plugin={{ item }} "--config={{ ckan_ini }}" chdir="{{ virtualenv }}"
#  with_items:
#    - "ckanext-harvest harvester initdb"
#    - "ckanext-ytp-tasks ytp-tasks-initialize-database"
#    - "ckanext-spatial spatial initdb"
#    - "ckanext-ytp-comments initdb"
#    - "ckanext-archiver archiver init"
#    - "ckanext-qa qa init"
#    - "ckanext-report report initdb"
#    - "ckanext-googleanalytics initdb"
#  tags:
#  - ckan
#  - google-analytics

- name: Copy credentials token
  copy: src="{{ google_credentials }}" dest="{{ cache_path }}/token.dat" mode=0644 owner=root group="{{ www_group }}"
  when: google_analytics != false
  tags:
    - ckan
    - google-analytics

- name: Add analytics fetching to cron
  cron: name="analytics" minute="*/5" hour="0-3" job="{{ virtualenv }}/bin/paster --plugin=ckanext-googleanalytics loadanalytics {{cache_path}}/token.dat --config={{ ckan_ini }}"
  when: google_analytics != false
  tags:
    - ckan
    - google-analytics


# Users

- name: Create initial CKAN users
  shell: ./bin/paster --plugin=ckan user add "{{ item.value.username }}" "password={{ item.value.password }}" "email={{ item.value.email }}" "--config={{ ckan_ini }}" chdir={{ virtualenv }}
  ignore_errors: True
  with_dict: ckan_users
  tags:
  - ckan

- name: Set CKAN sysadmins
  shell: ./bin/paster --plugin=ckan sysadmin add {{ item }} --config={{ ckan_ini }} chdir={{ virtualenv }}
  ignore_errors: True
  with_items: ckan_admins
  tags:
  - sysadmins
  - ckan


# TODO: this should be completely elsewhere
- name: Copy data structures for CKAN UI options
  copy: src={{ item }} dest={{ ckan_files_path }}/{{ item }} mode=0644 owner=root group={{ www_group }}
  register: copy_ckan_ui_data
  with_items:
    - license.json
    - service_classes.json
    - municipalities.json
    - life_situations.json
    - target_groups.json
  tags:
  - ckan


- name: Trigger Solr reindex
  file: path={{ files_root }}/.solr-reindex state=absent
  when: copy_ckan_ui_data|changed
  tags:
  - ckan

# TODO translations should probably be a separate role
# - include: translations.yml
- include: translations_simple.yml

#- name: re-minify CKAN javascript files
#  shell: ./bin/paster --plugin=ckan minify {{ ckan_source_path }}/ckan/public/base/javascript/modules "--config={{ ckan_ini }}" chdir="{{ virtualenv }}"
#  tags:
#  - ckan
#  - translations

- name: Ensure Apache restart
  service: name=apache2 state=restarted
  tags:
  - apache
  - ckan

- name: Ensure filestore path ownership
  command: chown -R "{{ www_user }}:{{ www_group }}" "{{ ckan_files_path }}"
  tags:
  - ckan

#- name: Copy celery configuration
#  template: src="../modules/ckanext-ytp-tasks/ytp_celery.py.j2" dest="/etc/ckan/default/ytp_celery.py" mode=0640 owner=root group="{{ www_group }}"
#  tags:
#  - ckan

# - include: supervisor.yml
# - include: cron.yml
